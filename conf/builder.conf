# SPDX-License-Identifier: Apache-2.0
# (c) Copyright 2019 - 2022 Xilinx, Inc. All rights reserved.
TE_PLATFORM([], [], [-D_GNU_SOURCE], [], [],
            [logger_core tools logic_expr log_proc trc conf_oid asn ndn \
             ipc bsapi loggerten rcfapi confapi comm_net_engine rcfunix \
             rpcxdr rpc_types rcfrpc tapi tapi_rpc tapi_env tapi_job \
             tapi_fio tapi_gtest tapi_performance tapi_tool tapi_bpf])

TE_TOOLS([rgt trc])

TE_TOOL_PARMS([trc], [--with-popups --with-log-urls])

TE_LIB_PARMS([rpcxdr], [], [], [--with-rpcdefs=tarpc_job.x.m4])

. $TE_BASE/engine/builder/te_functions
. $TE_BASE/engine/builder/te_ta_ssh_helper
if test -n "$TE_POWER_CTL"; then
    te_ta_type_as_platform "TE_POWER_CTL"

    TE_PLATFORM([${TE_POWER_CTL_TA_TYPE}], [], [-D_GNU_SOURCE], [-D_GNU_SOURCE], [],
                [logger_core tools conf_oid rpcxdr asn ndn \
                comm_net_agent loggerta rpctransport agentlib rcfpch \
                netconf tad])

    TE_LIB_PARMS([tad], [${TE_POWER_CTL_TA_TYPE}], [], [--without-tad])
    TE_LIB_PARMS([rcfpch],[${TE_POWER_CTL_TA_TYPE}],[],[--without-sniffers])

    TE_TA_TYPE([${TE_POWER_CTL_TA_TYPE}], [${TE_POWER_CTL_TA_TYPE}], [power-ctl],
               [], [], [], [], [comm_net_agent])
fi

define([TE_AGENT_BUILD], [
    if test -n "${$1}" -o -n "${$1_BUILD_HOST}" ; then
        if ! te_is_in_list "${$1_TA_TYPE}" $TE_BS_PLATFORMS ; then
            te_ta_type_as_platform "$1"

            case "${$1_TA_TYPE}" in
                *aarch64*) TE_TA_HOST=aarch64-pc-linux ;;
                *64*) TE_TA_HOST=x86_64-pc-linux ;;
                *)    TE_TA_HOST=i386-pc-linux   ;;
            esac

            if te_is_in_list with_bpf "$2" ; then
                export BPF_CFG="--with-bpf"
            else
                export BPF_CFG=""
            fi

            TE_AGENT_BUILD_PARMS=
            TE_AGENT_BUILD_CC=${$1_CC}
            TE_AGENT_BUILD_CFLAGS=${$1_CFLAGS}
            test -n "$TE_AGENT_BUILD_CC" && TE_AGENT_BUILD_CC="CC=$TE_AGENT_BUILD_CC"

            TE_PLATFORM_BUILD([${$1_TA_TYPE}], [])
            TE_PLATFORM([${$1_TA_TYPE}], [$TE_AGENT_BUILD_CC],
                        [$TE_AGENT_BUILD_CFLAGS -D_GNU_SOURCE],
                        [],
                        [],
                        [logger_core tools loggerta comm_net_agent conf_oid \
                         asn ndn rpcxdr rpctransport agentlib rpc_types \
                         rpcserver rcfpch tad netconf ta_job rpcs_job])
            SOU=
            if test -n "$BPF_CFG" ; then
                TE_PLATFORM_EXT([libbpf], [${$1_TA_TYPE}], [${TE_LIBBPF_SRC}], [], [],
                                [export OBJDIR=\${PWD} && make -C \${EXT_SOURCES}/src],
                                [\${EXT_SOURCES}/src/bpf.h \${EXT_SOURCES}/src/libbpf_common.h \
                                 \${EXT_SOURCES}/src/libbpf.h \${EXT_SOURCES}/src/libbpf_legacy.h],
                                [libbpf.so*], [], [], [bpf])
            fi
            TE_LIB_PARMS([rcfpch], [${$1_TA_TYPE}], [], [--with-sniffers=no])

            TE_LIB_PARMS([rpcxdr], [${$1_TA_TYPE}], [],
                         [--with-rpcdefs=tarpc_job.x.m4])

            # If no protocols are specified, all protocols are built
            TE_LIB_PARMS([tad], [${$1_TA_TYPE}], [], [--with-ipstack])

            TE_TA_TYPE([${$1_TA_TYPE}], [${$1_TA_TYPE}], [unix],
                       [--enable-pci \
                        --with-rcf-rpc \
                        --with-libnetconf \
                        --with-serialparse \
                        --with-sniffers=no \
                        --with-tc \
                        --without-static-libc \
                        $BPF_CFG \
                        --with-pcre],
                       [], [], [], [comm_net_agent ndn asn])

            if test -n "$BPF_CFG" ; then
                TE_TA_APP([libbpf], [${$1_TA_TYPE}], [${$1_TA_TYPE}], [.], [], [], [],
                          [cp \${TE_PREFIX}/lib/libbpf.so* \${TE_AGENTS_INST}/${$1_TA_TYPE}/])
            fi

            TE_TA_APP([ta_rpcprovider], [${$1_TA_TYPE}], [${$1_TA_TYPE}], [ta_rpcprovider], [], [],
                      [ta_job rpcs_job rpcserver agentlib rpcxdrta \
                       rpc_types rpctransport loggerta tools logger_core],
                      [\${EXT_SOURCES}/build.sh --extra-deps='libpcre'],
                      [ta_rpcs], [])
        fi

        if te_is_in_list with_spdk "$2" ; then
            if test -n "${SPDK_SRC}" ; then
                TE_TA_APP([spdk], [${$1_TA_TYPE}], [${$1_TA_TYPE}], [${SPDK_SRC}], [], [],
                          [], [${TS_TOPDIR}/scripts/build-spdk.sh ${RTE_KERNELDIR}], [],
                          [TE_CEPH_EXEC TE_USE_ONLOAD TE_OLD_SPDK], [--disable-vcs-ignores])
            fi
        fi

        if te_is_in_list with_compilebench "$2" ; then
            if test -n "${COMPILEBENCH_SRC}" ; then
                TE_TA_APP([compilebench], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${COMPILEBENCH_SRC}], [], [], [],
                          [${TS_TOPDIR}/scripts/build-compilebench.sh], [], [])
            fi
        fi

        if te_is_in_list with_dbench "$2" ; then
            if test -n "${DBENCH_SRC}" ; then
                TE_TA_APP([dbench], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${DBENCH_SRC}], [], [], [],
                          [${TS_TOPDIR}/scripts/build-dbench.sh], [], [])
            fi
        fi

        if te_is_in_list with_fio "$2" ; then
            if test -n "${FIO_SRC}" ; then
                TE_TA_APP([fio], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${FIO_SRC}], [], [], [],
                          [${TS_TOPDIR}/scripts/build-fio.sh], [], [])
            fi
        fi

        if te_is_in_list with_fsmark "$2" ; then
            if test -n "${FSMARK_SRC}" ; then
                TE_TA_APP([fsmark], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${FSMARK_SRC}], [], [], [],
                          [${TS_TOPDIR}/scripts/build-fsmark.sh], [], [])
            fi
        fi

        if te_is_in_list with_iozone "$2" ; then
            if test -n "${IOZONE_SRC}" ; then
                TE_TA_APP([iozone], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${IOZONE_SRC}], [], [], [],
                          [${TS_TOPDIR}/scripts/build-iozone.sh], [], [])
            fi
        fi

        if te_is_in_list with_xilnxtool "$2" ; then
            if test -n "${XILINXTOOL_SRC}" ; then
                TE_TA_APP([xilinxtool], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${XILINXTOOL_SRC}], [], [], [],
                          [${TS_TOPDIR}/scripts/copy-xilinxtool-scripts.sh], [], [])
            fi
        fi

        if te_is_in_list with_xfs "$2" ; then
            if test -n "${XFS_TS_DIR}" ; then
                TE_TA_APP([xfs], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${XFS_TS_DIR}], [], [], [],
                          [${TS_TOPDIR}/scripts/build-xfstests.sh], [], [])
            fi
        fi

        if te_is_in_list with_plugin "$2" ; then
            if test -n "${TE_PLUGIN_PATH}" ; then
                TE_TA_APP([plugin], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [$(dirname ${TE_PLUGIN_PATH})], [], [], [],
                          [${TS_TOPDIR}/scripts/copy-plugin.sh ${TE_PLUGIN_PATH}], [], [])
            fi
        fi

        if te_is_in_list with_bpf "$2" ; then
                TE_TA_APP([bpf], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${TE_BASE}/bpf], [], [], [],
                          [${TS_TOPDIR}/scripts/build-bpf_prog.sh], [], [])
        fi

        if te_is_in_list with_virtblk_ci_ansible "$2" ; then
            if test -n "${VIRTBLK_CI_PATH}" -a -d "${VIRTBLK_CI_PATH}/ansible" -a \
                    "${TE_BACKEND_SRV_TYPE}" != "connect"; then
                TE_TA_APP([virtblk_ci_ansible], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${VIRTBLK_CI_PATH}/ansible], [], [], [],
                          [${TS_TOPDIR}/scripts/copy-virtblk-ci-ansible.sh], [], [])
            fi
        fi

        if te_is_in_list with_ceph_helpers "$2" ; then
            TE_TA_APP([ceph_helpers], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                      [${TS_TOPDIR}/conf/scripts/backend-helpers], [], [], [],
                      [${TS_TOPDIR}/scripts/copy-backend-helpers.sh], [], [])
        fi

    fi
])

TE_AGENT_BUILD([TE_RHSIM_STARTER])
TE_AGENT_BUILD([TE_ARM_STARTER])
TE_AGENT_BUILD([TE_HOST_STARTER])
TE_AGENT_BUILD([TE_DISK_STARTER])
TE_AGENT_BUILD([TE_UART_LOGGER], [with_xilnxtool])
TE_AGENT_BUILD([TE_DUT_TST1], [with_spdk with_plugin])
TE_AGENT_BUILD([TE_DUT_TST2], [with_compilebench with_dbench with_fsmark \
                               with_iozone with_xfs with_fio])
TE_AGENT_BUILD([TE_DUT_TST3], [with_bpf with_fio with_ceph_helpers \
                               with_virtblk_ci_ansible])
TE_AGENT_BUILD([TE_NETCONSOLE])
