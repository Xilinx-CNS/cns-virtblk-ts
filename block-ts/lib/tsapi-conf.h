/* SPDX-License-Identifier: Apache-2.0 */
/* (c) Copyright 2019 - 2022 Xilinx, Inc. All rights reserved. */
/** @file
 * @brief Helper functions for build configuration files
 *
 * @defgroup blk-proxy-conf-helper Helpers for build configuration files
 * @ingroup virtblk-blk-proxy-lib
 * @{
 *
 * @author Artemii Morozov <Artemii.Morozov@oktetlabs.ru>
 */

#ifndef __TSAPI_CONF_H__
#define __TSAPI_CONF_H__

#include "tsapi.h"
#include "te_vector.h"
#include "te_string.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef struct tsapi_conf_kv {
    char *key;
    char *value;
} tsapi_conf_kv;

/** Section for config */
typedef struct tsapi_conf_section {
    char *name;      /**< Name of section */
    char *delimiter; /**< Delimiter between key and value */
    te_vec items;     /**< Items of section */
} tsapi_conf_section;

/** Config handler */
typedef struct tsapi_conf_t {
    te_vec sections; /**< Sections of config */
} tsapi_conf_t;

/** Config initializer */
#define TSAPI_CONF_INIT (tsapi_conf_t) \
{                                               \
    .sections = TE_VEC_INIT(tsapi_conf_section) \
}

/**
 * Get the section from sections vector
 *
 * @param conf         Config handler
 * @param section_name Section name
 *
 * @return Pointer to section or @c NULL
 */
extern tsapi_conf_section * tsapi_conf_section_get(tsapi_conf_t *conf,
                                                   const char *section_name);
/**
 * Create a section in config
 *
 * @param conf         Config handler
 * @param section_name Section name
 * @param delimiter    Delimiter between key and value in this section
 *
 * @return Status code
 */
extern te_errno tsapi_conf_create_section(tsapi_conf_t *conf,
                                          const char *section_name,
                                          const char *delimiter);

/**
 * Append key-value pair to section
 *
 * @param config            Config handler
 * @param section_name      Section name
 * @param key               Key
 * @param value             Value
 *
 * @return Status code
 */
extern te_errno tsapi_conf_append(tsapi_conf_t *config,
                                  const char *section_name,
                                  const char *key, const char *value);

/**
 * Flush config to the specific file on TA
 *
 * @param rpcs              RPC server
 * @param config            Config hanlder
 * @param path              Path to file
 *
 * @return Status code
 */
extern te_errno tsapi_conf_flush(rcf_rpc_server *rpcs,
                                 tsapi_conf_t *config,
                                 const char *path);

/**
 * Flush config to the file on the engine side
 *
 * @param config            Config hanlder
 * @param path              Path to file
 *
 * @return Status code
 */
extern te_errno tsapi_conf_flush_local(tsapi_conf_t *conf, const char *path);

/**
 * Free resources allocated for config handler
 *
 * @param conf Config handler
 */
extern void tsapi_conf_free(tsapi_conf_t *conf);

/**
 * Extract strings to generate config file from @p argv
 *
 * Each such string should have the format:
 * prefix-Section-Key=Value.
 *
 * Strings in "Section-Key=Value" format will be added to vector
 *
 * @param argc   Count of arguments
 * @param argv   List of arguments
 * @param prefix Prefix for config string
 * @param vec    Vector of result
 *
 * @return Status code
 */
extern te_errno tsapi_conf_opts_read(int argc, char **argv, const char *prefix,
                                    te_vec *vec);

/**
 * Parse configuration string in ""Section-Key=Value"" format.
 *
 * @param str          Configuration string
 * @param section_name String to save section name
 * @param kv           key-value pair to save key and value from string
 *
 * @return Status code
 */
extern te_errno tsapi_conf_parse_string(const char *str,
                                        te_string *section_name,
                                        tsapi_conf_kv *kv);

/**
 * Parse config from file. The config must be generated by this API
 *
 * @param ta       Test agent name where the config file is placed
 * @param filename Path to the config
 * @param conf     OUT: Config handler
 *
 * @return Status code
 */
extern te_errno tsapi_conf_read_from_file(const char *ta,
                                          const char *filename,
                                          tsapi_conf_t *conf);
#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* __TSAPI_CONF_H__ */

/** @} <!-- END blk-proxy-conf-helper --> */
